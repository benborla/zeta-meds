input LoginInput {
    email: String!
    password: String!
}

input RefreshTokenInput {
    refresh_token: String
}

type User {
    id: ID!
    name: String!
    email: String!
}

input RegisterInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required"])
    fqdn: String @rules(apply: ["required", "unique:system.hostnames,fqdn"])
    password: String @rules(apply: ["required"])
    password_confirmation: String @rules(apply: ["required"])
}

type AuthPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
    user: User!
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    email: String!
}

input NewPasswordWithCodeInput {
    email: String!
    token: String!
    password: String!
    password_confirmation: String!
}

extend type Mutation {
    login(data: LoginInput): Boolean!
        @field(resolver: "\\App\GraphQL\Resolvers\\LoginResolver@resolve")
    logout: LogoutResponse! @response(guards: ["api"])
        @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(data: ForgotPasswordInput!): ForgotPasswordResponse!
        @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(data: NewPasswordWithCodeInput): ForgotPasswordResponse!
        @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(data: RegisterInput!): RegisterResponse!
        @field(resolver: "App\\GraphQL\\Resolvers\\RegisterResolver@resolve")
    checkDomain(fqdn: String!) : CheckDomainResponse!
        @field(resolver: "App\\GraphQL\\Resolvers\\CheckDomainResolver@resolve")
}
